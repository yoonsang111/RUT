package com.stream.tour.mock;

import com.stream.tour.domain.option.domain.OptionHistory;
import com.stream.tour.domain.option.entity.OptionHistoryEntity;
import com.stream.tour.domain.option.service.port.OptionHistoryRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeOptionHistoryRepository implements OptionHistoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<OptionHistory> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public OptionHistory save(OptionHistory optionHistory) {
        if(optionHistory.getId() == null || optionHistory.getOptionId() == 0) {
            OptionHistory newHistory = OptionHistory.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .optionId(optionHistory.getOptionId())
                    .productId(optionHistory.getProductId())
                    .name(optionHistory.getName())
                    .stockQuantity(optionHistory.getStockQuantity())
                    .salesStatus(optionHistory.getSalesStatus())
                    .applicationDay(optionHistory.getApplicationDay())
                    .siteCurrencyId(optionHistory.getSiteCurrencyId())
                    .sitePrice(optionHistory.getSitePrice())
                    .platformCurrencyId(optionHistory.getPlatformCurrencyId())
                    .platformPrice(optionHistory.getPlatformPrice())
                    .salesStartDate(optionHistory.getSalesStartDate())
                    .salesEndDate(optionHistory.getSalesEndDate())
                    .specificDate(optionHistory.getSpecificDate())
                    .version(optionHistory.getVersion())
                    .build();
            data.add(newHistory);
            return newHistory;
        } else {
            // id가 있으면 기존 데이터로 판단
            data.removeIf(item -> Objects.equals(item.getId(), optionHistory.getId()));
            data.add(optionHistory); // 새로운 데이터로 다시 저장
            return optionHistory;
        }
    }

    @Override
    public void saveAll(List<OptionHistory> optionHistories) {
        for (OptionHistory optionHistory : optionHistories) {
            save(optionHistory);
        }
    }
}
